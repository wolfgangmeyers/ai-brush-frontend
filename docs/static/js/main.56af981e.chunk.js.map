{"version":3,"sources":["client.ts","reportWebVitals.ts","generated-client/base.ts","generated-client/common.ts","generated-client/api.ts","Generate.tsx","Authentication.tsx","ListJobs.tsx","JobDetails.tsx","JobResultDetails.tsx","Images.tsx","ImageDetails.tsx","Navigation.tsx","index.tsx"],"names":["client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","RequiredError","field","msg","name","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","value","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","cancelJob","id","a","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","query","headersFromBaseOptions","createJob","jobInput","localVarQueryParameter","data","deleteImage","deleteJob","deleteJobResult","getImage","download","getJob","getJobResult","getJobTask","listImages","cursor","direction","listJobResults","listJobs","saveJobResult","submitJobResult","jobResultInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","getClient","httpClient","defaults","common","localStorage","getItem","Generate","history","useHistory","useState","phrases","setPhrases","iterations","setIterations","count","setCount","label","setLabel","parent","setParent","lr","setLr","qs","parse","window","location","substring","console","log","job","push","parentId","cachedParent","lscache","get","parentResp","useEffect","updateParent","style","padding","type","onChange","e","target","map","phrase","i","marginBottom","marginRight","index","slice","updatePhrase","onClick","disabled","length","min","max","width","parseInt","step","parseFloat","onGenerate","Authentication","props","apikey","setApikey","useLocation","setItem","href","children","ListJobs","jobs","setJobs","resp","jobId","idx","findIndex","j","init","to","onDelete","JobDetails","setJob","results","setResults","params","useParams","loadParent","cached","refresh","resultIdsResp","uncachedResults","cachedResults","forEach","cachedResult","Promise","all","resultsResp","sort","b","score","fetchLatest","maxCreated","Math","r","created","handle","setInterval","clearInterval","join","margin","border","src","encoded_thumbnail","result","float","JobResultDetails","jobResult","setJobResult","job_id","onSave","onSaveAndFork","encoded_image","Images","images","setImages","load","moment","valueOf","imageIdsResp","uncachedImages","cachedImages","img","cachedImage","imageResp","prev","height","ImageDetails","image","setImage","onFork","Navigation","App","path","exact","render","document","getElementById"],"mappings":"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","file":"static/js/main.56af981e.chunk.js","sourcesContent":["import * as axios from \"axios\"\nimport { AIBrushApi } from \"./generated-client/api\"\n\nlet client: AIBrushApi\n\nexport function getClient(): AIBrushApi {\n    if (!client) {\n        const httpClient = axios.default\n        httpClient.defaults.headers.common[\"apikey\"] = localStorage.getItem(\"apikey\")\n        client = new AIBrushApi(undefined, \"https://qb1eyw689j.execute-api.us-east-1.amazonaws.com/Prod\", httpClient)\n    }\n    return client\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://qb1eyw689j.execute-api.us-east-1.amazonaws.com/Prod\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    encoded_thumbnail?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    encoded_latents?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score?: number;\n}\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface Job\n */\nexport interface Job {\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Job\n     */\n    created?: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Job\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Job\n     */\n    count?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Job\n     */\n    iterations?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Job\n     */\n    cancelled?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Job\n     */\n    lr?: number;\n}\n/**\n * \n * @export\n * @interface JobInput\n */\nexport interface JobInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof JobInput\n     */\n    phrases: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof JobInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobInput\n     */\n    label: string;\n    /**\n     * \n     * @type {number}\n     * @memberof JobInput\n     */\n    count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof JobInput\n     */\n    iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof JobInput\n     */\n    lr?: number;\n}\n/**\n * \n * @export\n * @interface JobList\n */\nexport interface JobList {\n    /**\n     * \n     * @type {Array<Job>}\n     * @memberof JobList\n     */\n    jobs?: Array<Job>;\n}\n/**\n * \n * @export\n * @interface JobResult\n */\nexport interface JobResult {\n    /**\n     * \n     * @type {string}\n     * @memberof JobResult\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobResult\n     */\n    job_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobResult\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobResult\n     */\n    encoded_thumbnail?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobResult\n     */\n    encoded_latents?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof JobResult\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof JobResult\n     */\n    created?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof JobResult\n     */\n    score?: number;\n}\n/**\n * \n * @export\n * @interface JobResultInput\n */\nexport interface JobResultInput {\n    /**\n     * \n     * @type {string}\n     * @memberof JobResultInput\n     */\n    encoded_image: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobResultInput\n     */\n    encoded_thumbnail: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobResultInput\n     */\n    encoded_latents: string;\n    /**\n     * \n     * @type {number}\n     * @memberof JobResultInput\n     */\n    score: number;\n}\n/**\n * \n * @export\n * @interface JobResultList\n */\nexport interface JobResultList {\n    /**\n     * \n     * @type {Array<JobResult>}\n     * @memberof JobResultList\n     */\n    results?: Array<JobResult>;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Cancel a job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('cancelJob', 'id', id)\n            const localVarPath = `/jobs/{id}/cancel`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new job\n         * @param {JobInput} [jobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createJob: async (jobInput?: JobInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(jobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteJob', 'id', id)\n            const localVarPath = `/jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deletes a job result\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteJobResult: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteJobResult', 'id', id)\n            const localVarPath = `/job-results/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image' | 'latents'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, download?: 'thumbnail' | 'image' | 'latents', options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (download !== undefined) {\n                localVarQueryParameter['download'] = download;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a single job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getJob', 'id', id)\n            const localVarPath = `/jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a job result by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image' | 'latents'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getJobResult: async (id: string, download?: 'thumbnail' | 'image' | 'latents', options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getJobResult', 'id', id)\n            const localVarPath = `/job-results/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (download !== undefined) {\n                localVarQueryParameter['download'] = download;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a job task from the queue\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getJobTask: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/job-tasks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {'forward' | 'reverse'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, direction?: 'forward' | 'reverse', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of results for a job\n         * @param {string} id \n         * @param {number} [cursor] \n         * @param {'forward' | 'reverse'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listJobResults: async (id: string, cursor?: number, direction?: 'forward' | 'reverse', options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listJobResults', 'id', id)\n            const localVarPath = `/jobs/{id}/results`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a list of jobs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listJobs: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Saves a job result as a new image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        saveJobResult: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('saveJobResult', 'id', id)\n            const localVarPath = `/job-results/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Submit a job result\n         * @param {string} id \n         * @param {JobResultInput} [jobResultInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitJobResult: async (id: string, jobResultInput?: JobResultInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('submitJobResult', 'id', id)\n            const localVarPath = `/jobs/{id}/results`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(jobResultInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Cancel a job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async cancelJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new job\n         * @param {JobInput} [jobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createJob(jobInput?: JobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createJob(jobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Deletes a job result\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteJobResult(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJobResult(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image' | 'latents'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, download?: 'thumbnail' | 'image' | 'latents', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, download, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a single job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a job result by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image' | 'latents'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getJobResult(id: string, download?: 'thumbnail' | 'image' | 'latents', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobResult(id, download, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Gets a job task from the queue\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getJobTask(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobTask(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {'forward' | 'reverse'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, direction?: 'forward' | 'reverse', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, direction, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of results for a job\n         * @param {string} id \n         * @param {number} [cursor] \n         * @param {'forward' | 'reverse'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listJobResults(id: string, cursor?: number, direction?: 'forward' | 'reverse', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResultList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listJobResults(id, cursor, direction, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a list of jobs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listJobs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listJobs(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Saves a job result as a new image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async saveJobResult(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.saveJobResult(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Submit a job result\n         * @param {string} id \n         * @param {JobResultInput} [jobResultInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async submitJobResult(id: string, jobResultInput?: JobResultInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.submitJobResult(id, jobResultInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Cancel a job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelJob(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.cancelJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new job\n         * @param {JobInput} [jobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createJob(jobInput?: JobInput, options?: any): AxiosPromise<Job> {\n            return localVarFp.createJob(jobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteJob(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Deletes a job result\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteJobResult(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteJobResult(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image' | 'latents'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, download?: 'thumbnail' | 'image' | 'latents', options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, download, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a single job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getJob(id: string, options?: any): AxiosPromise<Job> {\n            return localVarFp.getJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a job result by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image' | 'latents'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getJobResult(id: string, download?: 'thumbnail' | 'image' | 'latents', options?: any): AxiosPromise<JobResult> {\n            return localVarFp.getJobResult(id, download, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Gets a job task from the queue\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getJobTask(options?: any): AxiosPromise<Job> {\n            return localVarFp.getJobTask(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {'forward' | 'reverse'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, direction?: 'forward' | 'reverse', options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, direction, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of results for a job\n         * @param {string} id \n         * @param {number} [cursor] \n         * @param {'forward' | 'reverse'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listJobResults(id: string, cursor?: number, direction?: 'forward' | 'reverse', options?: any): AxiosPromise<JobResultList> {\n            return localVarFp.listJobResults(id, cursor, direction, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a list of jobs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listJobs(options?: any): AxiosPromise<JobList> {\n            return localVarFp.listJobs(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Saves a job result as a new image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        saveJobResult(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.saveJobResult(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Submit a job result\n         * @param {string} id \n         * @param {JobResultInput} [jobResultInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        submitJobResult(id: string, jobResultInput?: JobResultInput, options?: any): AxiosPromise<JobResult> {\n            return localVarFp.submitJobResult(id, jobResultInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Cancel a job\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public cancelJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).cancelJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new job\n     * @param {JobInput} [jobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createJob(jobInput?: JobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createJob(jobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a job\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Deletes a job result\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteJobResult(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteJobResult(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {'thumbnail' | 'image' | 'latents'} [download] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, download?: 'thumbnail' | 'image' | 'latents', options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, download, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a single job\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a job result by id\n     * @param {string} id \n     * @param {'thumbnail' | 'image' | 'latents'} [download] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getJobResult(id: string, download?: 'thumbnail' | 'image' | 'latents', options?: any) {\n        return AIBrushApiFp(this.configuration).getJobResult(id, download, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Gets a job task from the queue\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getJobTask(options?: any) {\n        return AIBrushApiFp(this.configuration).getJobTask(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {'forward' | 'reverse'} [direction] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, direction?: 'forward' | 'reverse', options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, direction, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of results for a job\n     * @param {string} id \n     * @param {number} [cursor] \n     * @param {'forward' | 'reverse'} [direction] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listJobResults(id: string, cursor?: number, direction?: 'forward' | 'reverse', options?: any) {\n        return AIBrushApiFp(this.configuration).listJobResults(id, cursor, direction, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a list of jobs.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listJobs(options?: any) {\n        return AIBrushApiFp(this.configuration).listJobs(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Saves a job result as a new image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public saveJobResult(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).saveJobResult(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Submit a job result\n     * @param {string} id \n     * @param {JobResultInput} [jobResultInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public submitJobResult(id: string, jobResultInput?: JobResultInput, options?: any) {\n        return AIBrushApiFp(this.configuration).submitJobResult(id, jobResultInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","import React, { FC, useEffect, useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport qs from \"qs\"\nimport lscache, { set } from \"lscache\"\n\nimport { getClient } from \"./client\"\n\nexport const Generate: FC = () => {\n\n  const client = getClient()\n\n  const history = useHistory()\n  const [phrases, setPhrases] = useState<Array<string>>([\"\"])\n  const [iterations, setIterations] = useState(100)\n  const [count, setCount] = useState(1)\n  const [label, setLabel] = useState(\"\")\n  const [parent, setParent] = useState<string | undefined>(undefined)\n  const [lr, setLr] = useState(0.06)\n\n  const searchParams = qs.parse(window.location.search.substring(1)) as any\n\n  function updatePhrase(phrase: string, index: number) {\n    setPhrases([...phrases.slice(0, index), phrase, ...phrases.slice(index + 1)])\n  }\n\n  function deletePhrase(index: number) {\n    setPhrases([...phrases.slice(0, index), ...phrases.slice(index + 1)])\n  }\n\n  function addPhrase() {\n    setPhrases([...phrases, \"\"])\n  }\n\n  async function onGenerate() {\n    console.log(\"phrases\", phrases)\n    // TODO: include parent, if one has been selected\n    const job = await client.createJob({\n      count, iterations, phrases, label, parent\n    })\n    history.push(`/jobs/${job.data.id}`)\n  }\n\n  async function updateParent(parentId: string) {\n    setParent(parentId)\n    // try to load from cache\n    const cachedParent = lscache.get(\"results/\" + parentId)\n    if (cachedParent) {\n      setPhrases(cachedParent.phrases)\n      return\n    }\n    const parentResp = await client.getImage(parentId)\n    setPhrases(parentResp.data.phrases as Array<string>)\n  }\n\n  useEffect(() => {\n    if (searchParams.parent) {\n      updateParent(searchParams.parent)\n    }\n  }, [searchParams.parent])\n\n  return (\n    <div style={{ padding: \"50px\" }}>\n      <h1>Generate images</h1>\n      <hr />\n      <label>Job Label:</label>&nbsp;\n      <input type=\"text\" value={label} onChange={e => setLabel(e.target.value)} />\n      <br /><br />\n      <label>Phrases:</label><br />\n      {phrases.map((phrase, i) => (\n        <div style={{ marginBottom: \"5px\" }}>\n          <input style={{ marginRight: \"5px\" }} type=\"text\" key={`phrase_${i}`} value={phrase} onChange={e => updatePhrase(e.target.value, i)} />\n          <button onClick={() => deletePhrase(i)} disabled={phrases.length === 1}>X</button>\n        </div>\n      ))}\n      <button type=\"button\" onClick={() => addPhrase()}>+ Add</button>\n      <br /><br />\n      <label>Iterations:</label>&nbsp;\n      <input min={10} max={5000} style={{ width: \"50px\" }} type=\"number\" value={iterations} onChange={e => setIterations(parseInt(e.target.value))} />\n      <br /><br />\n      <label>Count:</label>&nbsp;\n      <input min={1} max={100} style={{ width: \"50px\" }} type=\"number\" value={count} onChange={e => setCount(parseInt(e.target.value))} />\n      <br /><br />\n      <input min={0.01} max={0.2} step={0.01} style={{ width: \"50px\" }} type=\"number\" value={lr} onChange={e => setLr(parseFloat(e.target.value))} />\n      <br /><br />\n      <label>Parent:</label>&nbsp;{parent || \"\"}\n      <br/><br/>\n      <button onClick={() => onGenerate()}>Generate &gt;&gt;</button>\n    </div>\n  )\n}","import React, { FC, useEffect, useState } from \"react\"\nimport { useLocation } from \"react-router-dom\"\nimport qs from \"qs\"\n\nexport const Authentication: FC = (props) => {\n  const [apikey, setApikey] = useState<string>(\"\")\n  const location = useLocation()\n\n  useEffect(() => {\n    if (apikey) {\n      return\n    }\n    let key = localStorage.getItem(\"apikey\")\n    if (!key) {\n      const query = qs.parse(location.search.substring(1))\n      if (query[\"apikey\"]) {\n        key = query[\"apikey\"] as string\n        localStorage.setItem(\"apikey\", key)\n        window.location.href = \"/\"\n      }\n    }\n\n    if (key) {\n      setApikey(key)\n    }\n  }, [apikey, location.search])\n\n  if (!apikey) {\n    return <div>Unauthorized</div>\n  }\n\n  return <div>{props.children}</div>\n}","import React, { FC, useEffect, useState } from \"react\"\nimport { getClient } from \"./client\"\nimport { Job } from \"./generated-client/api\"\nimport { Link } from \"react-router-dom\"\n\nexport const ListJobs: FC = props => {\n\n    const client = getClient()\n\n    const [jobs, setJobs] = useState<Array<Job> | undefined>(undefined)\n\n    async function init() {\n        const resp = await client.listJobs()\n        if (resp.data.jobs) {\n            setJobs(resp.data.jobs)\n        }\n    }\n\n    async function onDelete(jobId: string) {\n        await client.deleteJob(jobId)\n        if (jobs) {\n            const idx = jobs.findIndex(j => j.id === jobId)\n            if (idx !== undefined && idx >= 0) {\n                setJobs([\n                    ...jobs.slice(0, idx),\n                    ...jobs.slice(idx + 1),\n                ])\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (!jobs) {\n            setJobs([])\n            init()\n        }\n    }, [jobs])\n\n    return (\n        <div style={{padding: \"50px\"}}>\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Label</th>\n                        <th>Count</th>\n                        <th>Iterations</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {jobs && jobs.map(job => (\n                        <tr key={job.id}>\n                            <td>\n                                <Link to={`/jobs/${job.id}`}>\n                                    {job.id}\n                                </Link>\n                            </td>\n                            <td>{job.label}</td>\n                            <td>{job.count}</td>\n                            <td>{job.iterations}</td>\n                            <td>\n                                <button onClick={() => onDelete(job.id as string)}>Delete</button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}","import React, { FC, useEffect, useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\nimport { Job, JobResult, Image } from \"./generated-client/api\"\nimport { getClient } from \"./client\"\nimport lscache from \"lscache\"\n\nexport const JobDetails: FC = () => {\n\n    const [job, setJob] = useState<Job | undefined>(undefined)\n    const [results, setResults] = useState<Array<JobResult>>([])\n    const [parent, setParent] = useState<Image | undefined>(undefined)\n\n    const params = useParams() as any\n    const client = getClient()\n    const history = useHistory()\n\n    async function loadParent(parentId: string) {\n        console.log(\"loadParent\")\n        const cachedParent = lscache.get(\"results/\" + parentId + \"_thumbnail\")\n        if (cachedParent) {\n            console.log(\"cached\", cachedParent)\n            setParent(cachedParent)\n        } else {\n            console.log(\"Loading parent\")\n            const parentResp = await client.getImage(parentId, \"thumbnail\")\n            lscache.set(\"results/\" + parentId + \"_thumbnail\", parentResp.data)\n            setParent(parentResp.data)\n        }\n    }\n\n    async function init() {\n        let cached = lscache.get(\"results/\" + params.job)\n        if (cached) {\n            const job = cached as Job\n            setJob(job)\n            if (job.parent) {\n                await loadParent(job.parent)\n            }\n            await refresh()\n            return\n        }\n        const resp = await client.getJob(params.job)\n        lscache.set(\"results/\" + params.job as string, resp.data)\n        setJob(resp.data)\n        if (resp.data.parent) {\n            await loadParent(resp.data.parent)\n        }\n        await refresh()\n    }\n\n    async function refresh() {\n        const resultIdsResp = await client.listJobResults(params.job)\n        if (resultIdsResp.data.results) {\n            const uncachedResults: Array<JobResult> = []\n            const cachedResults: Array<JobResult> = []\n            resultIdsResp.data.results.forEach(item => {\n                let cachedResult = lscache.get(\"results/\" + item.id + \"_thumbnail\")\n                if (cachedResult) {\n                    cachedResults.push(cachedResult)\n                } else {\n                    uncachedResults.push(item)\n                }\n            })\n            const resultsResp = await Promise.all(\n                uncachedResults.map(\n                    item => client.getJobResult(item.id as string, \"thumbnail\")\n                )\n            )\n            for (let item of resultsResp) {\n                lscache.set(\"results/\" + item.data.id + \"_thumbnail\", item.data)\n            }\n            const results = [\n                ...resultsResp.map(resp => resp.data as JobResult),\n                ...cachedResults\n            ]\n            results.sort((a, b) => (a.score as number) - (b.score as number))\n\n            setResults(results)\n        }\n    }\n\n    async function fetchLatest() {\n\n        if (results.length === 0) {\n            refresh()\n            return\n        }\n        const maxCreated = Math.max(...results.map(r => r.created as number))\n        const resultIdsResp = await client.listJobResults(params.job, maxCreated, \"forward\")\n        if (resultIdsResp.data.results) {\n            const resultsResp = await Promise.all(resultIdsResp.data.results.map(item => client.getJobResult(item.id as string)))\n            for (let item of resultsResp) {\n                lscache.set(\"results/\" + item.data.id + \"_thumbnail\", item.data)\n            }\n            setResults(results => [...resultsResp.map(resp => resp.data as JobResult), ...results])\n        }\n    }\n\n    useEffect(() => {\n        if (!job || job.id !== params.job) {\n            init()\n        }\n        const handle = setInterval(() => {\n            fetchLatest()\n        }, 10000)\n        return () => clearInterval(handle)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [params.job, job])\n\n    return (\n        (job &&\n            <div style={{ padding: \"50px\" }}>\n                Label: {job.label}\n                <br />\n                Phrases: {job.phrases && job.phrases.join(\", \")}\n                <br/>\n                Iterations: {job.iterations}\n                <br />\n                Count: {job.count}\n                <br/>\n                Results: {results.length}\n                <br/>\n                {parent && <div style={{margin: \"10px\", border: \"1px solid black\", padding: \"5px\"}}>\n                        Parent: <img style={{width: \"256px\", cursor: \"pointer\"}} src={`data:image/jpeg;base64,${parent.encoded_thumbnail}`}></img>\n                    </div>}\n                <button onClick={() => refresh()}>Refresh all</button>\n                <button onClick={() => fetchLatest()}>Fetch latest</button>\n                <hr/>\n                {results.map(result => (\n                    <div key={result.id} style={{margin: \"10px\", float: \"left\", border: \"1px solid black\", padding: \"5px\"}}>\n                        <img onClick={() => history.push(`/job-results/${result.id}`)} style={{width: \"256px\", cursor: \"pointer\"}} src={`data:image/jpeg;base64,${result.encoded_thumbnail}`}></img>\n                        <br/>\n                        Score: {result.score}\n                    </div>\n                ))}\n            </div>\n        ) || <div></div>\n    )\n}","import React, { FC, useEffect, useState } from \"react\"\nimport lscache from \"lscache\"\nimport { useHistory } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\nimport { getClient } from \"./client\"\nimport { JobResult } from \"./generated-client\"\n\nexport const JobResultDetails: FC = () => {\n    const params = useParams() as any\n    const client = getClient()\n    const history = useHistory()\n\n    const [jobResult, setJobResult] = useState<JobResult | undefined>(undefined)\n\n    async function init() {\n        const cachedResult = lscache.get(\"results/\" + params.result + \"_image\")\n        if (cachedResult) {\n            setJobResult(cachedResult)\n            return\n        }\n        const resp = await client.getJobResult(params.result, \"image\")\n        lscache.set(\"results/\" + params.result + \"_image\", resp.data)\n        setJobResult(resp.data)\n    }\n\n    function onCancel() {\n        history.push(`/jobs/${jobResult?.job_id}`)\n    }\n\n    async function onDelete() {\n        await client.deleteJobResult(jobResult?.id as string)\n        history.push(`/jobs/${jobResult?.job_id}`)\n    }\n\n    async function onSave() {\n        await client.saveJobResult(jobResult?.id as string)\n        history.push(`/jobs/${jobResult?.job_id}`)\n    }\n\n    async function onSaveAndFork() {\n        await client.saveJobResult(jobResult?.id as string)\n        history.push(`/?parent=${jobResult?.id}`)\n    }\n\n    useEffect(() => {\n        if (!jobResult || jobResult.id !== params.result) {\n            init()\n        }\n    }, [jobResult, params.result])\n\n    return (\n        <div style={{ padding: \"50px\" }}>\n            <button onClick={() => onCancel()}>Cancel</button>\n            <button onClick={() => onDelete()}>Delete</button>\n            <button onClick={() => onSave()}>Save</button>\n            <button onClick={() => onSaveAndFork()}>Save and fork</button>\n            <hr/>\n            {jobResult && (\n                <img style={{width: \"512px\"}} src={`data:image/jpeg;base64,${jobResult.encoded_image}`}></img>\n            )}\n        </div>\n    )\n}","import React, { FC, useState, useEffect } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { Image } from \"./generated-client/api\"\nimport { getClient } from \"./client\"\nimport lscache from \"lscache\"\nimport moment from \"moment\"\n\nexport const Images: FC = () => {\n    const [images, setImages] = useState<Array<Image>>([])\n\n    const history = useHistory()\n    const client = getClient()\n\n    // direction = reverse\n    // cursor = current time : moment().valueOf()\n    async function load(cursor?: number) {\n        cursor = cursor || moment().valueOf()\n        const imageIdsResp = await client.listImages(cursor, \"reverse\")\n        if (imageIdsResp.data.images) {\n            let uncachedImages: Array<Image> = []\n            let cachedImages: Array<Image> = []\n            imageIdsResp.data.images.forEach(img => {\n                const cachedImage = lscache.get(\"images/\" + img.id + \"_thumbnail\")\n                if (cachedImage) {\n                    cachedImages.push(cachedImage)\n                } else {\n                    uncachedImages.push(img)\n                }\n            })\n            const imageResp = await Promise.all(\n                uncachedImages.map(img => client.getImage(img.id as string, \"thumbnail\"))\n            )\n            for (let img of imageResp) {\n                lscache.set(\"images/\" + img.data.id + \"_thumbnail\", img.data)\n            }\n            let images = [\n                ...imageResp.map(r => r.data as Image),\n                ...cachedImages\n            ]\n\n            setImages(prev => {\n                images = [\n                    ...prev,\n                    ...images\n                ]\n                images.sort((a, b) => (b.created as number) - (a.created as number))\n                return images\n            })\n        }\n        // setImages(prev => [])\n    }\n\n    useEffect(() => {\n        setImages([])\n        load()\n    }, [])\n\n    function onLoadMore() {\n        const cursor = Math.min(...images.map(i => i.created as number))\n        load(cursor)\n    }\n\n    return (\n        <div style={{ padding: \"50px\" }}>\n            {images.map(img => (\n                <div key={img.id} style={{margin: \"10px\", float: \"left\", border: \"1px solid black\", padding: \"5px\"}}>\n                    <img onClick={() => history.push(`/images/${img.id}`)} style={{width: \"256px\", cursor: \"pointer\"}} src={`data:image/jpeg;base64,${img.encoded_thumbnail}`}></img>\n                </div>\n            ))}\n            <div style={{margin: \"10px\", float: \"left\", border: \"1px solid black\", padding: \"5px\"}}>\n                <button onClick={() => onLoadMore()} style={{ width: \"256px\", height: \"256px\" }}>\n                    Load More\n                </button>\n            </div>\n        </div>\n    )\n}","import React, { FC, useEffect, useState } from \"react\"\nimport lscache from \"lscache\"\nimport { useHistory } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\nimport { getClient } from \"./client\"\nimport { Image } from \"./generated-client\"\n\nexport const ImageDetails: FC = () => {\n    const params = useParams() as any\n    const client = getClient()\n    const history = useHistory()\n\n    const [image, setImage] = useState<Image | undefined>(undefined)\n\n    async function init() {\n        const cachedImage = lscache.get(\"/images/\" + params.image + \"_image\")\n        if (cachedImage) {\n            setImage(cachedImage)\n            return\n        }\n        const resp = await client.getImage(params.image, \"image\")\n        lscache.set(\"images/\" + params.image + \"_image\", resp.data)\n        setImage(resp.data)\n    }\n\n    function onCancel() {\n        history.push(\"/images\")\n    }\n\n    async function onDelete() {\n        await client.deleteImage(image?.id as string)\n        history.push(\"/images\")\n    }\n\n    async function onFork() {\n        history.push(`/?parent=${image?.id}`)\n    }\n\n    useEffect(() => {\n        if (!image || image.id !== params.image) {\n            init()\n        }\n    }, [image, params.image])\n\n    return (\n        <div style={{ padding: \"50px\" }}>\n            <button onClick={() => onFork()}>Fork</button>\n            <button onClick={() => onCancel()}>Cancel</button>\n            <button onClick={() => onDelete()}>Delete</button>\n            {/*\n            <button onClick={() => onSave()}>Save</button>\n            <button onClick={() => onSaveAndFork()}>Save and fork</button> */}\n            <hr/>\n            {image && (\n                <img style={{width: \"512px\"}} src={`data:image/jpeg;base64,${image.encoded_image}`}></img>\n            )}\n        </div>\n    )\n}","import React, { FC } from \"react\"\nimport { Link } from \"react-router-dom\"\n\nexport const Navigation : FC = () => {\n    return (\n        <div>\n            <Link to=\"/\">Create new Job</Link>&nbsp;\n            <Link to=\"/jobs\">Jobs</Link>&nbsp;\n            <Link to=\"/images\">Images</Link>\n        </div>\n    )\n}","import './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport React, { FC } from 'react';\nimport { render } from 'react-dom';\n\nimport { Generate } from \"./Generate\"\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Authentication } from './Authentication';\nimport { ListJobs } from './ListJobs';\n\nimport \"./index.css\"\nimport { JobDetails } from './JobDetails';\nimport { JobResultDetails } from './JobResultDetails';\nimport { Images } from './Images';\nimport { ImageDetails } from './ImageDetails';\nimport { Navigation } from './Navigation';\n\nconst App: FC = () => {\n\n  return (\n    <Router>\n      <Authentication>\n        <Navigation />\n        <Switch>\n          <Route path=\"/\" exact={true}>\n            <Generate />\n          </Route>\n          <Route path=\"/jobs\" exact={true}>\n            <ListJobs />\n          </Route>\n          <Route path=\"/jobs/:job\">\n            <JobDetails />\n          </Route>\n          <Route path=\"/job-results/:result\">\n            <JobResultDetails />\n          </Route>\n          <Route path=\"/images\" exact={true}>\n            <Images />\n          </Route>\n          <Route path=\"/images/:image\" exact={true}>\n            <ImageDetails />\n          </Route>\n\n        </Switch>\n      </Authentication>\n    </Router>\n\n  )\n}\n\nrender(<App />, document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}